{
  parser: "babel-eslint",
  env: {
    browser: true,
    es6: true,
    node: true,
  },
  rules: {
    "accessor-pairs": 0, // enforce getter and setter pairs in objects
    "array-bracket-spacing": [2, "never"], // enforce consistent spacing inside array brackets
    "array-callback-return": 0, // enforce return statements in callbacks of array methods
    "arrow-body-style": 0, // require braces around arrow function bodies
    "arrow-parens": 0, // require parentheses around arrow function arguments
    "arrow-spacing": 2, // enforce consistent spacing before and after the arrow in arrow functions
    "block-scoped-var": 2, // enforce the use of variables within the scope they are defined
    "block-spacing": 2, // enforce consistent spacing inside single-line blocks
    "brace-style": 2, // enforce consistent brace style for blocks
    "callback-return": 0, // require return statements after callbacks
    "camelcase": 2, // enforce camelcase naming convention
    "comma-dangle": [2, "always-multiline"], // require or disallow trailing commas
    "comma-spacing": 2, // enforce consistent spacing before and after commas
    "comma-style": 2, // enforce consistent comma style
    "complexity": 0, // enforce a maximum cyclomatic complexity allowed in a program
    "computed-property-spacing": 2, // enforce consistent spacing inside computed property brackets
    "consistent-return": 2, // require return statements to either always or never specify values
    "consistent-this": 2, // enforce consistent naming when capturing the current execution context
    "constructor-super": 2, // require super() calls in constructors
    "curly": 0, // enforce consistent brace style for all control statements
    "default-case": 2, // require default cases in switch statements
    "dot-location": [2, "property"], // enforce consistent newlines before and after dots
    "dot-notation": 2, // enforce dot notation whenever possible
    "eol-last": 2, // enforce at least one newline at the end of files
    "eqeqeq": 2, // require the use of === and !==
    "func-names": [2, "never"], // require or disallow named function expressions
    "func-style": 0, // enforce the consistent use of either function declarations or expressions

    "generator-star-spacing": 0, // enforce consistent spacing around * operators in generator functions
    "global-require": 0, // require require() calls to be placed at top-level module scope
    "guard-for-in": 0, // require for-in loops to include an if statement
    "handle-callback-err": 0, // require error handling in callbacks
    "id-blacklist": 0, // disallow specified identifiers
    "id-length": 0, // enforce minimum and maximum identifier lengths
    "id-match": 0, // require identifiers to match a specified regular expression
    "indent": 0, // enforce consistent indentation
    "init-declarations": 0, // require or disallow initialization in var declarations
    "jsx-quotes": 0, // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": 0, // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": 0, // enforce consistent spacing before and after keywords
    "linebreak-style": 0, // enforce consistent linebreak style
    "lines-around-comment": 0, // require empty lines around comments
    "max-depth": 0, // enforce a maximum depth that blocks can be nested
    "max-len": 0, // enforce a maximum line length
    "max-lines": 0, // enforce a maximum number of lines per file
    "max-nested-callbacks": 0, // enforce a maximum depth that callbacks can be nested
    "max-params": 0, // enforce a maximum number of parameters in function definitions
    "max-statements": 0, // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": 0, // enforce a maximum number of statements allowed per line
    "multiline-ternary": 0, // enforce newlines between operands of ternary expressions
    "new-cap": 0, // require constructor function names to begin with a capital letter
    "new-parens": 0, // require parentheses when invoking a constructor with no arguments
    "newline-after-var": 0, // require or disallow an empty line after var declarations
    "newline-before-return": 0, // require an empty line before return statements
    "newline-per-chained-call": 0, // require a newline after each call in a method chain
    "no-alert": 0, // disallow the use of alert, confirm, and prompt
    "no-array-constructor": 0, // disallow Array constructors
    "no-bitwise": 0, // disallow bitwise operators
    "no-caller": 0, // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": 0, // disallow lexical declarations in case clauses
    "no-catch-shadow": 0, // disallow catch clause parameters from shadowing variables in the outer scope
    "no-class-assign": 0, // disallow reassigning class members
    "no-cond-assign": 0, // disallow assignment operators in conditional expressions
    "no-confusing-arrow": 0, // disallow arrow functions where they could be confused with comparisons
    "no-console": 0, // disallow the use of console
    "no-const-assign": 0, // disallow reassigning const variables
    "no-constant-condition": 0, // disallow constant expressions in conditions
    "no-continue": 0, // disallow continue statements
    "no-control-regex": 0, // disallow control characters in regular expressions
    "no-debugger": 0, // disallow the use of debugger
    "no-delete-var": 0, // disallow deleting variables
    "no-div-regex": 0, // disallow division operators explicitly at the beginning of regular expressions
    "no-dupe-args": 0, // disallow duplicate arguments in function definitions
    "no-dupe-class-members": 0, // disallow duplicate class members
    "no-dupe-keys": 0, // disallow duplicate keys in object literals
    "no-duplicate-case": 0, // disallow duplicate case labels
    "no-duplicate-imports": 0, // disallow duplicate module imports
    "no-else-return": 0, // disallow else blocks after return statements in if statements
    "no-empty": 0, // disallow empty block statements
    "no-empty-character-class": 0, // disallow empty character classes in regular expressions
    "no-empty-function": 0, // disallow empty functions
    "no-empty-pattern": 0, // disallow empty destructuring patterns
    "no-eq-null": 0, // disallow null comparisons without type-checking operators
    "no-eval": 0, // disallow the use of eval()
    "no-ex-assign": 0, // disallow reassigning exceptions in catch clauses
    "no-extend-native": 0, // disallow extending native types
    "no-extra-bind": 0, // disallow unnecessary calls to .bind()
    "no-extra-boolean-cast": 0, // disallow unnecessary boolean casts
    "no-extra-label": 0, // disallow unnecessary labels
    "no-extra-parens": 0, // disallow unnecessary parentheses
    "no-extra-semi": 0, // disallow unnecessary semicolons
    "no-fallthrough": 0, // disallow fallthrough of case statements
    "no-floating-decimal": 0, // disallow leading or trailing decimal points in numeric literals
    "no-func-assign": 0, // disallow reassigning function declarations
    "no-implicit-coercion": 0, // disallow shorthand type conversions
    "no-implicit-globals": 0, // disallow var and named function declarations in the global scope
    "no-implied-eval": 0, // disallow the use of eval()-like methods
    "no-inline-comments": 0, // disallow inline comments after code
    "no-inner-declarations": 0, // disallow function or var declarations in nested blocks
    "no-invalid-regexp": 0, // disallow invalid regular expression strings in RegExp constructors
    "no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
    "no-irregular-whitespace": 0, // disallow irregular whitespace outside of strings and comments
    "no-iterator": 0, // disallow the use of the __iterator__ property
    "no-label-var": 0, // disallow labels that share a name with a variable
    "no-labels": 0, // disallow labeled statements
    "no-lone-blocks": 0, // disallow unnecessary nested blocks
    "no-lonely-if": 0, // disallow if statements as the only statement in else blocks
    "no-loop-func": 0, // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": 0, // disallow magic numbers
    "no-mixed-operators": 0, // disallow mixed binary operators
    "no-mixed-requires": 0, // disallow require calls to be mixed with regular var declarations
    "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation
    "no-multi-spaces": 0, // disallow multiple spaces
    "no-multi-str": 0, // disallow multiline strings
    "no-multiple-empty-lines": 0, // disallow multiple empty lines
    "no-native-reassign": 0, // disallow assignments to native objects or read-only global variables
    "no-negated-condition": 0, // disallow negated conditions
    "no-negated-in-lhs": 0, // disallow negating the left operand in in expressions
    "no-nested-ternary": 0, // disallow nested ternary expressions
    "no-new": 0, // disallow new operators outside of assignments or comparisons
    "no-new-func": 0, // disallow new operators with the Function object
    "no-new-object": 0, // disallow Object constructors
    "no-new-require": 0, // disallow new operators with calls to require
    "no-new-symbol": 0, // disallow new operators with the Symbol object
    "no-new-wrappers": 0, // disallow new operators with the String, Number, and Boolean objects
    "no-obj-calls": 0, // disallow calling global object properties as functions
    "no-octal": 0, // disallow octal literals
    "no-octal-escape": 0, // disallow octal escape sequences in string literals
    "no-param-reassign": 0, // disallow reassigning function parameters
    "no-path-concat": 0, // disallow string concatenation with __dirname and __filename
    "no-plusplus": 0, // disallow the unary operators ++ and --
    "no-process-env": 0, // disallow the use of process.env
    "no-process-exit": 0, // disallow the use of process.exit()
    "no-proto": 0, // disallow the use of the __proto__ property
    "no-prototype-builtins": 0, // disallow calling some Object.prototype methods directly on objects
    "no-redeclare": 0, // disallow var redeclaration
    "no-regex-spaces": 0, // disallow multiple spaces in regular expressions
    "no-restricted-globals": 0, // disallow specified global variables
    "no-restricted-imports": 0, // disallow specified modules when loaded by import
    "no-restricted-modules": 0, // disallow specified modules when loaded by require
    "no-restricted-syntax": 0, // disallow specified syntax
    "no-return-assign": 0, // disallow assignment operators in return statements
    "no-script-url": 0, // disallow javascript: urls
    "no-self-assign": 0, // disallow assignments where both sides are exactly the same
    "no-self-compare": 0, // disallow comparisons where both sides are exactly the same
    "no-sequences": 0, // disallow comma operators
    "no-shadow": 0, // disallow var declarations from shadowing variables in the outer scope
    "no-shadow-restricted-names": 0, // disallow identifiers from shadowing restricted names
    "no-spaced-func": 0, // disallow spacing between function identifiers and their applications
    "no-sparse-arrays": 0, // disallow sparse arrays
    "no-sync": 0, // disallow synchronous methods
    "no-tabs": 0, // Disallow tabs in file
    "no-ternary": 0, // disallow ternary operators
    "no-this-before-super": 0, // disallow this/super before calling super() in constructors
    "no-throw-literal": 0, // disallow throwing literals as exceptions
    "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
    "no-undef": 2, // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef-init": 0, // disallow initializing variables to undefined
    "no-undefined": 0, // disallow the use of undefined as an identifier
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
    "no-unexpected-multiline": 0, // disallow confusing multiline expressions
    "no-unmodified-loop-condition": 0, // disallow unmodified loop conditions
    "no-unneeded-ternary": 0, // disallow ternary operators when simpler alternatives exist
    "no-unreachable": 0, // disallow unreachable code after return, throw, continue, and break statements
    "no-unsafe-finally": 0, // disallow control flow statements in finally blocks
    "no-unused-expressions": 0, // disallow unused expressions
    "no-unused-labels": 0, // disallow unused labels
    "no-unused-vars": 2, // disallow unused variables
    "no-use-before-define": 0, // disallow the use of variables before they are defined
    "no-useless-call": 0, // disallow unnecessary calls to .call() and .apply()
    "no-useless-computed-key": 0, // disallow unnecessary computed property keys in object literals
    "no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals
    "no-useless-constructor": 0, // disallow unnecessary constructors
    "no-useless-escape": 0, // disallow unnecessary escape characters
    "no-useless-rename": 0, // disallow renaming import, export, and destructured assignments to the same name
    "no-var": 0, // require let or const instead of var
    "no-void": 0, // disallow void operators
    "no-warning-comments": 0, // disallow specified warning terms in comments
    "no-whitespace-before-property": 0, // disallow whitespace before properties
    "no-with": 0, // disallow with statements
    "object-curly-newline": 0, // enforce consistent line breaks inside braces
    "object-curly-spacing": 0, // enforce consistent spacing inside braces
    "object-property-newline": 0, // enforce placing object properties on separate lines
    "object-shorthand": 0, // require or disallow method and property shorthand syntax for object literals
    "one-var": [2, "never"], // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": 0, // require or disallow newlines around var declarations
    "operator-assignment": 0, // require or disallow assignment operator shorthand where possible
    "operator-linebreak": 0, // enforce consistent linebreak style for operators
    "padded-blocks": 0, // require or disallow padding within blocks
    "prefer-arrow-callback": 0, // require arrow functions as callbacks
    "prefer-const": 0, // require const declarations for variables that are never reassigned after declared
    "prefer-reflect": 0, // require Reflect methods where applicable
    "prefer-rest-params": 0, // require rest parameters instead of arguments
    "prefer-spread": 0, // require spread operators instead of .apply()
    "prefer-template": 0, // require template literals instead of string concatenation
    "quote-props": 0, // require quotes around object literal property names
    "quotes": [2, "double"], // enforce the consistent use of either backticks, double, or single quotes
    "radix": 0, // enforce the consistent use of the radix argument when using parseInt()
    "require-jsdoc": 0, // require JSDoc comments
    "require-yield": 0, // require generator functions to contain yield
    "rest-spread-spacing": 0, // enforce spacing between rest and spread operators and their expressions
    "semi": [2, "never"], // require or disallow semicolons instead of ASI
    "semi-spacing": 0, // enforce consistent spacing before and after semicolons
    "sort-imports": 0, // enforce sorted import declarations within modules
    "sort-vars": 0, // require variables within the same declaration block to be sorted
    "space-before-blocks": 0, // enforce consistent spacing before blocks
    "space-before-function-paren": 0, // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": 0, // enforce consistent spacing inside parentheses
    "space-infix-ops": 0, // require spacing around operators
    "space-unary-ops": 0, // enforce consistent spacing before or after unary operators
    "spaced-comment": 0, // enforce consistent spacing after the // or /* in a comment
    "strict": 0, // require or disallow strict mode directives
    "template-curly-spacing": 0, // require or disallow spacing around embedded expressions of template strings
    "unicode-bom": 0, // require or disallow Unicode byte order mark (BOM)
    "use-isnan": 0, // require calls to isNaN() when checking for NaN
    "valid-jsdoc": 0, // enforce valid JSDoc comments
    "valid-typeof": 0, // enforce comparing typeof expressions against valid strings
    "vars-on-top": 0, // require var declarations be placed at the top of their containing scope
    "wrap-iife": 0, // require parentheses around immediate function invocations
    "wrap-regex": 0, // require parenthesis around regex literals
    "yield-star-spacing": 0, // require or disallow spacing around the * in yield* expressions
    "yoda": 0, // require or disallow “Yoda” conditions

    "react/display-name": 0, // Prevent missing displayName in a React component definition
    "react/forbid-prop-types": 0, // Forbid certain propTypes
    "react/no-danger": 2, // Prevent usage of dangerous JSX properties
    "react/no-deprecated": 2, // Prevent usage of deprecated methods
    "react/no-did-mount-set-state": 2, // Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 2, // Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 2, // Prevent direct mutation of this.state
    "react/no-is-mounted": 2, // Prevent usage of isMounted
    "react/no-multi-comp": 0, // Prevent multiple component definition per file
    "react/no-render-return-value": 2, // Prevent usage of the return value of React.render
    "react/no-set-state": 0, // Prevent usage of setState
    "react/no-string-refs": 2, // Prevent using string references in ref attribute.
    "react/no-unknown-property": 2, // Prevent usage of unknown DOM property (fixable)
    "react/prefer-es6-class": 2, // Enforce ES5 or ES6 class for React Components
    "react/prefer-stateless-function": 2, // Enforce stateless React Components to be written as a pure function
    "react/prop-types": 2, // Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 2, // Prevent missing React when using JSX
    "react/require-extension": 0, // Restrict file extensions that may be required
    "react/require-optimization": 0, // Enforce React components to have a shouldComponentUpdate method
    "react/require-render-return": 2, // Enforce ES5 or ES6 class for returning value in render function
    "react/self-closing-comp": 2, // Prevent extra closing tags for components without children
    "react/sort-comp": 2, // Enforce component methods order
    "react/sort-prop-types": 2, // Enforce propTypes declarations alphabetical sorting
    "react/jsx-boolean-value": 2, // Enforce boolean attributes notation in JSX (fixable)
    "react/jsx-closing-bracket-location": 2, // Validate closing bracket location in JSX (fixable)
    "react/jsx-curly-spacing": 2, // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
    "react/jsx-equals-spacing": 2, // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
    "react/jsx-filename-extension": 0, // Restrict file extensions that may contain JSX
    "react/jsx-first-prop-new-line": 2, // Enforce position of the first prop in JSX
    "react/jsx-handler-names": 2, // Enforce event handler naming conventions in JSX
    "react/jsx-indent": 0, // Validate JSX indentation
    "react/jsx-indent-props": 0, // Validate props indentation in JSX (fixable)
    "react/jsx-key": 2, // Validate JSX has key prop when in array or iterator
    "react/jsx-max-props-per-line": 2, // Limit maximum of props on a single line in JSX
    "react/jsx-no-bind": 0, // Prevent usage of .bind() and arrow functions in JSX props
    "react/jsx-no-comment-textnodes": 0, // Prevent comments from being inserted as text nodes
    "react/jsx-no-duplicate-props": 2, // Prevent duplicate props in JSX
    "react/jsx-no-literals": 0, // Prevent usage of unwrapped JSX strings
    "react/jsx-no-target-blank": 2, // Prevent usage of unsafe target='_blank'
    "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX
    "react/jsx-pascal-case": 2, // Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-props": 2, // Enforce props alphabetical sorting
    "react/jsx-space-before-closing": 2, // Validate spacing before closing bracket in JSX (fixable)
    "react/jsx-uses-react": 2, // Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 2, // Prevent variables used in JSX to be incorrectly marked as unused
  },
  plugins: [
    "react",
  ]
}